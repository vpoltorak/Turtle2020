#BlueJ class context
comment0.target=SimpleSound
comment0.text=\r\n\ The\ <code>SimpleSound</code>\ class\ is\ an\ implementation\ of\ the\r\n\ Java\ Sound\ API\ specifically\ designed\ for\ use\ with\ students.\r\n\ http\://java.sun.com/products/java-media/sound/index.html\r\n\ <p>\r\n\ This\ class\ allows\ for\ easy\ playback,\ and\ manipulation\ of\ AU,\r\n\ AIFF,\ and\ WAV\ files.\r\n\ <p>\r\n\r\n\ Code\ &\ ideas\ for\ this\ class\ related\ to\ playing\ and\r\n\ viewing\ the\ sound\ were\ borrowed\ from\ the\ Java\ Sound\ Demo\:\r\n\ http\://java.sun.com/products/java-media/sound/\r\n\ samples/JavaSoundDemo/\r\n\r\n\ Also,\ some\ code\ borrowed\ from\ Tritonus\ as\ noted.\r\n\r\n\ Copyright\ Georgia\ Institute\ of\ Technology\ 2004\r\n\ @author\ Ellie\ Harmon,\ ellie@cc.gatech.edu\r\n\ @author\ Barbara\ Ericson\ ericson@mindspring.com\r\n
comment1.params=
comment1.target=SimpleSound()
comment1.text=\r\n\ Constructs\ a\ <code>SimpleSound</code>\ of\ 3\ seconds\ long.\r\n
comment10.params=
comment10.target=SoundExplorer\ getSoundExplorer()
comment10.text=\r\n\ Method\ that\ returns\ the\ SoundExplorer\r\n\ @return\ the\ sound\ explorer\r\n
comment11.params=
comment11.target=byte[]\ asArray()
comment11.text=\r\n\ Method\ to\ return\ the\ byte\ array\r\n\ @return\ an\ array\ of\ bytes\ which\ represents\ the\ simple\ sound\r\n\ @see\ SimpleSound\#getBuffer\r\n
comment12.params=
comment12.target=java.util.Vector\ getPlaybacks()
comment12.text=\r\n\ Method\ that\ returns\ the\ vector\ of\ playback\ threads\ currently\r\n\ active\ on\ this\ sound.\r\n\ @return\ the\ vector\ of\ playback\ threads\ for\ this\ simple\ sound\r\n
comment13.params=
comment13.target=java.lang.String\ getFileName()
comment13.text=\r\n\ Method\ that\ returns\ the\ name\ of\ the\ file\ this\ sound\ came\ from.\r\n\ If\ this\ sound\ did\ not\ originate\ with\ a\ file,\ this\ value\ will\r\n\ be\ null.\r\n\ @return\ the\ file\ name\ associated\ with\ this\ sound\ or\ null\r\n\ @see\ \#loadFromFile(String\ fileName)\r\n
comment14.params=
comment14.target=boolean\ getDEBUG()
comment14.text=\r\n\ Method\ to\ get\ the\ value\ of\ the\ debug\ flag\r\n\ @return\ true\ if\ in\ debug\ mode\ else\ false\r\n
comment15.params=newBuffer
comment15.target=void\ setBuffer(byte[])
comment15.text=\r\n\ Changes\ the\ byte\ array\ that\ represents\ this\ sound.\r\n\ @param\ newBuffer\ a\ byte\ array\ representation\ of\ the\ new\ sound\ we\r\n\ want\ this\ to\ represent.\r\n
comment16.params=newAudioFileFormat
comment16.target=void\ setAudioFileFormat(javax.sound.sampled.AudioFileFormat)
comment16.text=\r\n\ Changes\ the\ AudioFileFormat\ of\ this\ sound.\r\n\ @param\ newAudioFileFormat\ the\ new\ audioFileFormat\ that\ describes\r\n\ this\ sound.\r\n\ @see\ AudioFileFormat\r\n
comment17.params=soundExplorer
comment17.target=void\ setSoundExplorer(SoundExplorer)
comment17.text=\r\n\ Changes\ the\ explorer\ of\ this\ object.\r\n\ @param\ soundExplorer\ the\ new\ SoundExplorer\ to\ use\r\n\ @see\ SoundExplorer\r\n
comment18.params=
comment18.target=javax.sound.sampled.AudioInputStream\ makeAIS()
comment18.text=\r\n\ Creates\ an\ <code>AudioInputStream</code>\ for\ this\ sound\ from\ the\r\n\ <code>buffer</code>\ and\ the\ <code>audioFileFormat</code>.\r\n\ @return\ an\ AudioInputStream\ representing\ this\ sound.\r\n\ @see\ AudioInputStream\r\n
comment19.params=message
comment19.target=void\ printError(java.lang.String)
comment19.text=\r\n\ Invokes\ <code>printError(message,\ null)</code>\r\n\r\n\ @see\ SimpleSound\#printError(String\ message,\ Exception\ e)\r\n\ @throws\ SoundException\ Will\ throw\ under\ every\ circumstance.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ This\ way\ we\ can\ catch\ the\ exception\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ in\ JES.\r\n
comment2.params=numFrames
comment2.target=SimpleSound(int)
comment2.text=\r\n\ Constructs\ a\ <code>SimpleSound</code>\ of\ the\ specified\ length.\r\n\ This\ sound\ will\ simply\ consist\ of\ an\ empty\ byte\ array,\ and\ an\r\n\ <code>AudioFileFormat</code>\ with\ the\ following\ values\:\r\n\ <ul>\r\n\ <li><code>AudioFileFormat.Type.WAVE</code>\r\n\ <li>22.05K\ sampling\ rate\r\n\ <li>16\ bit\ sample\r\n\ <li>1\ channel\r\n\ <li>signed\ PCM\ encoding\r\n\ <li>small-endian\ byte\ order\r\n\ </ul>\r\n\ Note\ that\ no\ new\ sound\ file\ is\ created,\ we\ only\ represent\ the\r\n\ sound\ with\ a\ buffer\ and\ the\ AudioFileFormat.\ \ If\ a\ file\ is\r\n\ desired,\ then\ the\ method\ <code>writeToFile(String\ filename)\r\n\ </code>\ must\ be\ called\ on\ this\ newly\ created\ sound.\r\n\r\n\ @param\ numFrames\ the\ number\ of\ samples\ in\ the\ sound\r\n\ @see\ SimpleSound\#write(String\ filename)\r\n
comment20.params=message\ e
comment20.target=void\ printError(java.lang.String,\ java.lang.Exception)
comment20.text=\r\n\ Prints\ the\ given\ String\ to\ the\ "standard"\ error\ output\ stream,\ then\r\n\ prints\ a\ stack\ trace\ on\ the\ exception,\ and\ then\ exits\ the\ program.\ \ If\r\n\ the\ String\ is\ null,\ then\ nothing\ happens,\ the\ method\ just\ returns.\ \ If\r\n\ the\ Exception\ is\ null,\ then\ it\ prints\ the\ String\ and\ then\ exits\ the\r\n\ program.\r\n\r\n\ @param\ message\ A\ description\ of\ the\ error\r\n\ @param\ e\ The\ exception,\ if\ any,\ that\ was\ caught\ regarding\ the\ error\r\n\ @throws\ SoundException\ Will\ throw\ under\ every\ circumstance.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ This\ way\ we\ can\ catch\ the\ exception\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ in\ JES.\r\n
comment21.params=
comment21.target=boolean\ isStereo()
comment21.text=\r\n\ Method\ to\ check\ if\ a\ sound\ is\ stereo\ (2\ channels)\ or\ not\r\n\ @return\ true\ if\ in\ stereo\ else\ false\r\n
comment22.params=fileName
comment22.target=void\ write(java.lang.String)
comment22.text=\r\n\ Method\ to\ write\ this\ sound\ to\ a\ file\r\n\ @param\ fileName\ the\ name\ of\ the\ file\ to\ write\ to\r\n
comment23.params=outFileName
comment23.target=void\ writeToFile(java.lang.String)
comment23.text=\r\n\ Creates\ an\ audioInputStream\ from\ this\ sound,\ and\ then\ writes\r\n\ this\ stream\ out\ to\ the\ file\ with\ the\ specified\ name.\ \ If\ no\r\n\ file\ exists,\ one\ is\ created.\ \ If\ a\ file\ already\ exists,\ then\ it\r\n\ is\ overwritten.\ \ This\ does\ not\ check\ the\ extension\ of\ the\r\n\ fileName\ passed\ in\ to\ make\ sure\ it\ agrees\ with\ the\r\n\ <code>AudioFileFormat.Type</code>\ of\ this\ sound.\r\n\r\n\ @param\ outFileName\ The\ name\ of\ the\ file\ to\ write\ this\ sound\ to\r\n\ @throws\ SoundException\ if\ any\ error\ is\ encountered\ while\r\n\ writing\ to\ the\ file.\r\n
comment24.params=inFileName
comment24.target=void\ loadFromFile(java.lang.String)
comment24.text=\r\n\ Resets\ the\ fields\ of\ this\ sound\ so\ that\ it\ now\ represents\ the\r\n\ sound\ in\ the\ specified\ file.\ \ If\ successful,\ the\ fileName\r\n\ ariable\ is\ updated\ such\ that\ it\ is\ equivalent\ to\r\n\ <code>inFileName</code>.\r\n\r\n\ @param\ inFileName\ the\ path\ and\ filename\ of\ the\ sound\ we\ want\ to\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ represent.\r\n\ @throws\ SoundException\ if\ any\ problem\ is\ encountered\ while\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ reading\ in\ from\ the\ file.\r\n
comment25.params=
comment25.target=void\ play()
comment25.text=\r\n\ Creates\ a\ new\ Playback\ thread\ and\ starts\ it.\ \ \ The\ thread\ is\r\n\ guarranteed\ to\ finish\ playing\ the\ sound\ as\ long\ as\ the\ program\r\n\ doesn't\ exit\ before\ it\ is\ done.\ \ This\ method\ does\ not\ block,\r\n\ however.\ \ So,\ if\ you\ invoke\ <code>play()</code>\ multiple\ times\r\n\ in\ a\ row,\ sounds\ will\ simply\ play\ on\r\n\ top\ of\ eachother\ -\ "accidental\ mixing"\r\n\r\n\ @see\ Playback\r\n
comment26.params=
comment26.target=void\ blockingPlayOld()
comment26.text=\r\n\ Creates\ a\ new\ Playback\ thread,\ starts\ it,\ then\ waits\ for\ the\r\n\ entire\ sound\ to\ finish\ playing\ before\ it\ returns.\ \ This\ method\r\n\ is\ guarranteed\ to\ play\ the\ entire\ sound,\ and\ does\ not\ allow\ for\r\n\ any\ "accidental\ mixing"\r\n\r\n\ @see\ Playback\r\n
comment27.params=
comment27.target=void\ blockingPlay()
comment27.text=\r\n\ Plays\ the\ sound,\ then\ sleeps\ for\ how\r\n\ long\ the\ sound\ SHOULD\ last.\r\n
comment28.params=rate\ durInFrames
comment28.target=void\ playAtRateDur(double,\ double)
comment28.text=\r\n\ Checks\ the\ value\ of\ durInFrames\ to\ make\ sure\ that\ it\ is\ not\r\n\ larger\ than\ Integer.MAX_VALUE\ to\ guarrantee\ safe\ casting.\r\n\ Also\ checks\ the\ value\ of\ rate\ to\ make\ sure\ that\ it\ is\ not\r\n\ larger\ than\ Float.MAX_VALUE\ before\ casting.\r\n\r\n\ @param\ rate\ a\ double\ representing\ the\ change\ in\ sampleRate\r\n\ (\=\=frameRate)\ for\ playing\ back\ this\ sound\r\n\ @param\ durInFrames\ a\ double\ representing\ how\ much\ of\ this\r\n\ sound\ we\ want\ to\ play.\r\n\ @see\ SimpleSound\#playAtRateInRange(float\ rate,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ startFrame,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ endFrame,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ boolean\ isBlocking)\r\n\ @throws\ SoundException\ if\ there\ are\ problems\ playing\ the\ sound.\r\n
comment29.params=rate\ durInFrames
comment29.target=void\ blockingPlayAtRateDur(double,\ double)
comment29.text=\r\n\ First,\ checks\ the\ value\ of\ durInFrames\ to\ make\ sure\ that\ it\ is\r\n\ not\ larger\ than\ Integer.MAX_VALUE\ to\ guarrantee\ safe\ casting.\r\n\ Simmilarly,\ checks\ the\ value\ of\ rate\ to\ make\ sure\ that\ it\ is\r\n\ not\ larger\ than\ FLoat.MAX_VALUE\ before\ casting.\r\n\r\n\ @param\ rate\ a\ double\ representing\ the\ change\ in\ sampleRate\r\n\ (\=\=frameRate)\ for\ playing\ back\ this\ sound\r\n\ @param\ durInFrames\ a\ double\ representing\ how\ much\ of\ this\ sound\r\n\ we\ want\ to\ play\r\n\ @see\ SimpleSound\#playAtRateInRange(float\ range,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ startFrame,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ endFrame,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ boolean\ isBlocking)\r\n\ @throws\ SoundException\ if\ there\ are\ problems\ playing\ the\ sound.\r\n
comment3.params=numFrames\ sampleRate
comment3.target=SimpleSound(int,\ int)
comment3.text=\r\n\ Constructs\ a\ <code>SimpleSound</code>\ of\ the\ specified\ length.\r\n\ This\ sound\ will\ simply\ consist\ of\ an\ empty\ byte\ array,\ and\ an\r\n\ <code>AudioFileFormat</code>\ with\ the\ following\ values\:\r\n\ <ul>\r\n\ <li><code>AudioFileFormat.Type.WAVE</code>\r\n\ <li>22.05K\ sampling\ rate\r\n\ <li>16\ bit\ sample\r\n\ <li>1\ channel\r\n\ <li>signed\ PCM\ encoding\r\n\ <li>small-endian\ byte\ order\r\n\ </ul>\r\n\ Note\ that\ no\ new\ sound\ file\ is\ created,\ we\ only\ represent\ the\r\n\ sound\ with\ a\ buffer\ and\ the\ AudioFileFormat.\ \ If\ a\ file\ is\r\n\ desired,\ then\ the\ method\ <code>writeToFile(String\ filename)\r\n\ </code>\ must\ be\ called\ on\ this\ newly\ created\ sound.\r\n\r\n\ @param\ numFrames\ the\ number\ of\ samples\ in\ the\ sound\r\n\ @see\ SimpleSound\#write(String\ filename)\r\n
comment30.params=rate\ startFrame\ endFrame
comment30.target=void\ playAtRateInRange(float,\ int,\ int)
comment30.text=\r\n\ Calls\ <code>playAtRateInRange(rate,\ startFrame,\ endFrame,\r\n\ false)\ </code>.\r\n\r\n\ @param\ rate\ a\ float\ representing\ the\ change\ in\ sampleRate\r\n\ (\=\=frameRate)\ for\ playing\ back\ this\ sound\r\n\ @param\ startFrame\ an\ int\ representing\ the\ frame\ at\ which\ we\r\n\ want\ to\ begin\ playing\ the\ sound\r\n\ @param\ endFrame\ an\ int\ representing\ the\ frame\ at\ which\ want\r\n\ to\ stop\ playing\ the\ sound\r\n\ @see\ SimpleSound\#playAtRateInRange(float\ range,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ startFrame,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ endFrame,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ boolean\ isBlocking)\r\n\ @throws\ SoundException\ if\ there\ are\ problems\ playing\ the\ sound.\r\n
comment31.params=rate\ startFrame\ endFrame
comment31.target=void\ blockingPlayAtRateInRange(float,\ int,\ int)
comment31.text=\r\n\ Calls\ <code>playAtRateInRange(rate,\ startFrame,\ endFrame,\ true)\r\n\ </code>.\r\n\r\n\ @param\ rate\ a\ float\ representing\ the\ change\ in\ sampleRate\r\n\ (\=\=frameRate)\ for\ playing\ back\ this\ sound\r\n\ @param\ startFrame\ an\ int\ representing\ the\ frame\ at\ which\ we\ want\r\n\ to\ begin\ playing\ the\ sound\r\n\ @param\ endFrame\ an\ int\ representing\ the\ frame\ at\ which\ want\r\n\ to\ stop\ playing\ the\ sound\r\n\ @see\ SimpleSound\#playAtRateInRange(float\ range,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ startFrame,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ int\ endFrame,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ boolean\ isBlocking)\r\n\ @throws\ SoundException\ if\ there\ are\ problems\ playing\ the\ sound.\r\n
comment32.params=rate\ startFrame\ endFrame\ isBlocking
comment32.target=void\ playAtRateInRange(float,\ int,\ int,\ boolean)
comment32.text=\r\n\ Plays\ the\ specified\ segment\ of\ this\ sound\ at\ the\ given\ sample\r\n\ rate.\ \ Then\ it\ saves\ the\ old\ fields\ (buffer\ and\ audioFileFormat)\r\n\ of\ this\ sound\ into\ temporary\ variables,\ and\ setting\ the\ fields\r\n\ of\ this\ sound\ to\ modified\ values.\ \ Then\ it\ creates\ a\ Playback\r\n\ thread\ on\ this\ sound\ (with\ the\ modified\ values)\ and\ starts\ the\r\n\ thread.\ \ The\ values\ for\ buffer\ and\ audioFileFormat\ are\ restored\r\n\ to\ their\ original\ values\ before\ the\ method\ returns.\r\n\r\n\ @param\ rate\ The\ change\ in\ the\ sampleRate\ (\=\=frameRate)\ for\r\n\ playing\ back\ this\ sound.\ \ The\ old\ SampleRate\ is\ multiplied\ by\r\n\ this\ value.\ \ So,\ if\ rate\ \=\ 2,\ the\ sound\ will\ play\ twice\ as\ fast\r\n\ (half\ the\ length),\ and\ if\ rate\ \=\ .5,\ the\ sound\ will\ play\ half\ as\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ fast\ (twice\ the\ length).\r\n\ @param\ startFrame\ The\ index\ of\ the\ frame\ where\ we\ want\ to\ begin\r\n\ play\r\n\ @param\ endFrame\ The\ index\ of\ the\ frame\ where\ we\ want\ to\ end\ play\r\n\ @param\ isBlocking\ If\ true,\ this\ method\ waits\ until\ the\ thread\ is\r\n\ done\ playing\ the\ sound\ before\ returning.\ \ If\ false,\ it\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ simply\ starts\ the\ thread\ and\ then\ returns.\r\n\ @throws\ SoundException\ if\ there\ are\ any\ problems\ playing\ the\r\n\ sound.\r\n
comment33.params=playbackToRemove
comment33.target=void\ removePlayback(Playback)
comment33.text=\r\n\ Deletes\ the\ specified\ playback\ object\ from\ the\ Vector.\ \ This\r\n\ should\ only\ be\ called\ from\ within\ the\ run()\ method\ of\ an\r\n\ individual\ playback\ thread.\r\n\r\n\ @see\ Playback\#run()\r\n
comment34.params=frameNum
comment34.target=byte[]\ getFrame(int)
comment34.text=\r\n\ Returns\ an\ array\ containing\ all\ of\ the\ bytes\ in\ the\ specified\r\n\ frame.\r\n\r\n\ @param\ frameNum\ the\ index\ of\ the\ frame\ to\ access\r\n\ @return\ the\ array\ containing\ all\ of\ the\ bytes\ in\ frame\r\n\ \ \ \ \ \ \ \ \ <code>frameNum</code>\r\n\ @throws\ SoundException\ if\ the\ frame\ number\ is\ invalid.\r\n
comment35.params=
comment35.target=int\ getLengthInFrames()
comment35.text=\r\n\ Obtains\ the\ length\ of\ the\ audio\ data\ contained\ in\ the\ file,\r\n\ expressed\ in\ sample\ frames.\r\n\r\n\ @return\ the\ number\ of\ sample\ frames\ of\ audio\ data\ in\ the\ file\r\n
comment36.params=
comment36.target=int\ getNumSamples()
comment36.text=\r\n\ Returns\ the\ number\ of\ samples\ in\ this\ sound\r\n\ @return\ the\ number\ of\ sample\ frames\r\n
comment37.params=frameNum
comment37.target=SoundSample\ getSample(int)
comment37.text=\r\n\ Method\ to\ create\ and\ return\ a\ SoundSample\ object\ for\ the\ given\r\n\ frame\ number\r\n\ @return\ a\ SoundSample\ object\ for\ this\ frame\ number\r\n
comment38.params=
comment38.target=SoundSample[]\ getSamples()
comment38.text=\r\n\ Method\ to\ create\ and\ return\ an\ array\ of\ SoundSample\ objects\r\n\ @return\ the\ array\ of\ SoundSample\ objects\r\n
comment39.params=index\ ex
comment39.target=void\ reportIndexException(int,\ java.lang.Exception)
comment39.text=\r\n\ Method\ to\ report\ an\ index\ exception\ for\ this\ sound\r\n
comment4.params=sampleSizeInBits\ isBigEndian
comment4.target=SimpleSound(int,\ boolean)
comment4.text=\r\n\ Constructs\ a\ simple\ sound\ with\ the\ given\ sample\ size\ in\ bits\ and\r\n\ type\ of\ endian\ (big\ or\ little)\r\n
comment40.params=index
comment40.target=int\ getSampleValueAt(int)
comment40.text=\r\n\ Method\ to\ get\ the\ sample\ at\ the\ passed\ index\ and\ handle\r\n\ any\ SoundExceptions\r\n\ @param\ index\ the\ desired\ index\r\n\ @return\ the\ sample\ value\r\n
comment41.params=frameNum
comment41.target=int\ getSampleValue(int)
comment41.text=\r\n\ If\ this\ is\ a\ mono\ sound,\ obtains\ the\ single\ sample\ contained\r\n\ within\ this\ frame,\ else\ obtains\ the\ first\ (left)\ sample\r\n\ contained\ in\ the\ specified\ frame.\r\n\r\n\ @param\ frameNum\ the\ index\ of\ the\ frame\ to\ access\r\n\ @return\ an\ integer\ representation\ of\ the\ bytes\ contained\ within\r\n\ the\ specified\ frame\r\n\ @throws\ SoundException\ if\ the\ frame\ number\ is\ invalid.\r\n
comment42.params=frameNum
comment42.target=int\ getLeftSample(int)
comment42.text=\r\n\ Obtains\ the\ left\ sample\ of\ the\ audio\ data\ contained\ at\ the\ specified\r\n\ frame.\r\n\r\n\ @param\ frameNum\ the\ index\ of\ the\ frame\ to\ access\r\n\ @return\ an\ int\ representation\ of\ the\ bytes\ contained\ in\ the\ specified\r\n\ \ \ \ \ \ \ \ \ frame.\r\n\ @throws\ SoundException\ if\ the\ frameNumber\ is\ invalid\r\n
comment43.params=frameNum
comment43.target=int\ getRightSample(int)
comment43.text=\r\n\ Obtains\ the\ right\ sample\ of\ the\ audio\ data\ contained\ at\ the\ specified\r\n\ frame.\r\n\r\n\ @param\ frameNum\ the\ index\ of\ the\ frame\ to\ access\r\n\ @return\ an\ int\ representation\ of\ the\ bytes\ contained\ in\ the\ specified\r\n\ \ \ \ \ \ \ \ \ frame.\r\n\ @throws\ SoundException\ if\ the\ frameNumber\ is\ invalid,\ or\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ encoding\ isn't\ supported.\r\n
comment44.params=
comment44.target=int\ getLengthInBytes()
comment44.text=\r\n\ Obtains\ the\ length\ of\ this\ sound\ in\ bytes.\ \ Note,\ that\ this\ number\ is\ not\r\n\ neccessarily\ the\ same\ as\ the\ length\ of\ this\ sound's\ file\ in\ bytes.\r\n\r\n\ @return\ the\ sound\ length\ in\ bytes\r\n
comment45.params=
comment45.target=int\ getLength()
comment45.text=\r\n\ Method\ to\ return\ the\ length\ of\ the\ sound\ as\ the\ number\ of\ samples\r\n\ @return\ the\ length\ of\ the\ sound\ as\ the\ number\ of\ samples\r\n
comment46.params=
comment46.target=int\ getChannels()
comment46.text=\r\n\ Obtains\ the\ number\ of\ channels\ of\ this\ sound.\r\n\r\n\ @return\ the\ number\ of\ channels\ (1\ for\ mono,\ 2\ for\ stereo),\ or\r\n\ <code>AudioSystem.NOT_SPECIFIED</code>\r\n\ @see\ AudioSystem\#NOT_SPECIFIED\r\n
comment47.params=frameNum\ theFrame
comment47.target=void\ setFrame(int,\ byte[])
comment47.text=\r\n\ Changes\ the\ value\ of\ each\ byte\ of\ the\ specified\ frame.\r\n\r\n\ @param\ frameNum\ the\ index\ of\ the\ frame\ to\ change\r\n\ @param\ theFrame\ the\ byte\ array\ that\ will\ be\ copied\ into\ this\ sound's\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ buffer\ in\ place\ of\ the\ specified\ frame.\r\n@throws\ SoundException\ if\ the\ frameNumber\ is\ invalid.\r\n
comment48.params=index\ value
comment48.target=void\ setSampleValueAt(int,\ int)
comment48.text=\r\n\ Method\ to\ set\ the\ sample\ value\ at\ the\ passed\ index\ to\ the\ passed\ value\r\n\ @param\ index\ the\ index\r\n\ @param\ value\ the\ new\ value\r\n
comment49.params=frameNum\ sample
comment49.target=void\ setSampleValue(int,\ int)
comment49.text=\r\n\ Changes\ the\ value\ of\ the\ sample\ found\ at\ the\ specified\ frame.\ \ If\ this\r\n\ sound\ has\ more\ than\ one\ channel,\ then\ this\ defaults\ to\ setting\ only\ the\r\n\ first\ (left)\ sample.\r\n\r\n\ @param\ frameNum\ the\ index\ of\ the\ frame\ where\ the\ sample\ should\ be\ changed\r\n\ @param\ sample\ an\ int\ representation\ of\ the\ new\ sample\ to\ put\ in\ this\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ sound's\ buffer\ at\ the\ specified\ frame\r\n\ @throws\ SoundException\ if\ the\ frameNumber\ is\ invalid,\ or\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ another\ problem\ is\ encountered\r\n
comment5.params=fileName
comment5.target=SimpleSound(java.lang.String)
comment5.text=\r\n\ Constructs\ a\ new\ SimpleSound\ from\ the\ given\ file.\r\n\ @param\ fileName\ The\ File\ from\ which\ to\ create\ this\ sound.\r\n\ @see\ SimpleSound\#loadFromFile(String\ filename)\r\n
comment50.params=frameNum\ sample
comment50.target=void\ setLeftSample(int,\ int)
comment51.params=frameNum\ sample
comment51.target=void\ setRightSample(int,\ int)
comment52.params=
comment52.target=void\ explore()
comment52.text=\r\n\ Method\ to\ open\ a\ sound\ viewer\ on\ a\ copy\ of\ this\ sound\r\n
comment53.params=key\ duration\ intensity
comment53.target=void\ playNote(int,\ int,\ int)
comment53.text=\r\n\ Method\ to\ play\ a\ note\ using\ MIDI\r\n\ @param\ key\ the\ piano\ key\ to\ play\r\n\ @param\ duration\ how\ long\ to\ play\ the\ note\r\n\ @param\ intensity\ how\ hard\ to\ strike\ the\ note\ from\ (0-127)\r\n
comment54.params=mp3File\ wavFile
comment54.target=void\ convert(java.lang.String,\ java.lang.String)
comment54.text=\r\n\ Method\ to\ convert\ a\ mp3\ sound\ into\ a\ wav\ sound\r\n\ @param\ mp3File\r\n\ @param\ wavFile\r\n
comment55.params=
comment55.target=java.lang.String\ toString()
comment55.text=\r\n\ Obtains\ a\ string\ representation\ of\ this\ JavaSound.\r\n\ @return\ a\ String\ representation\ of\ this\ JavaSound.\r\n
comment6.params=sound
comment6.target=SimpleSound(SimpleSound)
comment6.text=\r\n\ Constructor\ that\ creates\ a\ new\ SimpleSound\ by\ copying\ a\ passed\r\n\ SimpleSound\r\n\ @param\ sound\ the\ sound\ to\ copy\r\n
comment7.params=
comment7.target=byte[]\ getBuffer()
comment7.text=\r\n\ Method\ that\ returns\ the\ byte\ array\ representation\ of\ this\r\n\ simple\ sound.\r\n\ @return\ \ \ \ \ the\ sound\ represented\ as\ a\ byte\ array\r\n
comment8.params=
comment8.target=javax.sound.sampled.AudioFileFormat\ getAudioFileFormat()
comment8.text=\r\n\ Method\ that\ returns\ the\ AudioFileFormat\ describing\ this\r\n\ simple\ sound.\r\n\ @return\ the\ AudioFileFormat\ describing\ this\ sound\r\n\ @see\ AudioFileFormat\r\n
comment9.params=
comment9.target=double\ getSamplingRate()
comment9.text=\r\n\ Method\ to\ get\ the\ sampling\ rate\ of\ this\ sound\r\n\ @return\ the\ sampling\ rate\ in\ number\ of\ samples\ per\ second\r\n
numComments=56
